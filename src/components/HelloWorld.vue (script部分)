import JsonTool from './JsonTool.vue';
import JavaTool from './JavaTool.vue';
import TimestampTool from './TimestampTool.vue'; // 添加导入
import StorageService from '@/utils/StorageService';

export default {
  name: 'HelloWorld',
  components: {
    JsonTool,
    JavaTool,
    TimestampTool // 注册组件
  },
  props: {
    msg: String
  },
  data() {
    return {
      activeMenu: 'home', // 默认值会被恢复的状态覆盖
      hoverMenu: null,
      activeMenuIndex: 0, 
      menus: [
        {
          id: 'home',
          label: '主页',
          icon: 'fas fa-home', // 保持原有图标
          description: '平台主页'
        },
        {
          id: 'json',
          icon: 'fas fa-code-branch', // 更新为可用的JSON相关图标
          label: 'JSON',
          description: 'JSON格式化、验证、压缩和转换工具，帮助开发者更高效地处理JSON数据'
        },
        {
          id: 'timestamp',
          label: '时间戳',
          icon: 'fas fa-clock', // 保持原有图标
          description: '时间戳与日期格式互转，支持多种时间格式和时区转换'
        },
        {
          id: 'java',
          label: 'Java 工具',
          icon: 'fas fa-code', // 保持更通用的代码图标
          description: 'Java相关工具，包括代码格式化、类结构分析等功能'
        }
      ]
    }
  },
  mounted() {
    // 恢复上一次的应用状态
    this.restoreState();
    
    // 监听浏览器关闭或刷新事件
    window.addEventListener('beforeunload', this.saveCurrentState);
  },
  beforeUnmount() {
    // 保存当前状态
    this.saveCurrentState();
    
    // 移除事件监听
    window.removeEventListener('beforeunload', this.saveCurrentState);
  },
  computed: {
    activeIndicatorStyle() {
      const menuIndex = this.menus.findIndex(menu => menu.id === this.activeMenu);
      if (menuIndex === -1) return {};
      
      // 微调位置确保完美对齐，调整按钮大小
      const buttonHeight = 44; // 按钮高度从48px减小到44px
      const gap = 16; // 保持相同的间距
      const topPadding = 16; // 保持相同的顶部内边距
      const offsetY = topPadding + menuIndex * (buttonHeight + gap);
      
      return {
        top: `${offsetY}px`,
        opacity: 1
      };
    }
  },
  methods: {
    // 添加新方法来更新活动菜单索引
    updateActiveMenuIndex() {
      this.activeMenuIndex = this.menus.findIndex(menu => menu.id === this.activeMenu);
    },
    
    switchMenu(menuId) {
      this.activeMenu = menuId;
      this.saveCurrentState(); // 每次切换菜单时保存状态
      
      // 在状态更新后调用方法更新索引
      this.$nextTick(() => {
        this.updateActiveMenuIndex();
        
        const activeBtn = this.$el.querySelector('.menu-button.active');
        if (activeBtn) {
          // 根据实际按钮位置调整指示器位置
          const rect = activeBtn.getBoundingClientRect();
          const sidebar = this.$el.querySelector('.sidebar');
          const sidebarRect = sidebar.getBoundingClientRect();
          const top = rect.top - sidebarRect.top;
          
          // 更新指示器样式
          const indicator = this.$el.querySelector('.active-bg-indicator');
          if (indicator) {
            indicator.style.top = `${top}px`;
          }
        }
      });
    },
    handleMouseEnter(menuId) {
      this.hoverMenu = menuId;
    },
    handleMouseLeave() {
      this.hoverMenu = null;
    },
    // 保存当前应用状态
    saveCurrentState() {
      const appState = {
        activeMenu: this.activeMenu
      };
      
      StorageService.updateSection('appState', appState);
    },
    
    // 恢复应用状态
    restoreState() {
      const savedState = StorageService.getSection('appState');
      
      if (savedState) {
        // 恢复激活的菜单
        if (savedState.activeMenu) {
          // 验证菜单ID是否有效
          const validMenu = this.menus.some(menu => menu.id === savedState.activeMenu);
          if (validMenu) {
            this.activeMenu = savedState.activeMenu;
            
            // 在下一个渲染周期更新UI状态
            this.$nextTick(() => {
              this.updateActiveMenuIndex();
              
              // 显示通知
              const menuName = this.menus.find(menu => menu.id === savedState.activeMenu).label;
              setTimeout(() => {
                const toastMessage = this.activeMenu === 'home' ? 
                  '欢迎回来！已恢复到主页' : 
                  `已恢复到上次使用的${menuName}`;
                
                // 使用ToastService显示通知
                const ToastService = this.$root.$toast || window.$toast;
                if (ToastService && ToastService.info) {
                  ToastService.info(toastMessage);
                }
              }, 500); // 延迟显示通知，让页面有足够时间渲染
            });
          }
        }
      }
    }
  }
}